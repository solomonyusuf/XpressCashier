@layout AuthLayout
@page "/login2FA"
@using System.Security.Claims
@using System.Timers
@inject NavigationManager router
@inject UserManager<IdentityUser> _user
@inject SignInManager<IdentityUser> _sign
@inject RevalidatingIdentityAuthenticationStateProvider<IdentityUser> _rev

<div class=" d-flex flex-column bg-white">
    <div class="row g-0 flex-fill">
      <div class="col-12 col-lg-6 col-xl-4 border-top-wide border-primary d-flex flex-column justify-content-center">
        <div class="container container-tight my-5 px-lg-5">
          <div class="text-center mb-4">
            <a href="." class="navbar-brand navbar-brand-autodark"><img src="/logo.png" height="36" alt=""></a>
          </div>
                <h2 class="h3 text-center mb-3">
                    Xpress <span style="color:red;">Ecashier</span>
                </h2>
                <hr />
          <h4 class="h3 text-center mb-3">
           2 Factor Authentication
          </h4>
          <EditForm Model="model" autocomplete="off" OnSubmit="@OnPost">
              @if(Error != null)
              {
                        <span style="color:red;">@Error</span>
              }
            <div class="mb-3">
              <label class="form-label">Enter Email Token</label>
              <InputText @bind-Value="@Email" type="@Visible" class="form-control" placeholder="Mail Token" autocomplete="off" required />
             </div>
            <div class="mb-2">
              <label class="form-label">
             Enter Phone Number Token
              </label>
              <div class="input-group input-group-flat">
              <InputText @bind-Value="@Number" type="@Visible" class="form-control" placeholder="Phone Number Token" autocomplete="off" required />
              </div>
            </div>
            <div class="mb-2">
            <span>
                <button @onclick="@(()=> ChangeVisibility())" class="btn btn-rounded btn-default" title="Show password" data-bs-toggle="tooltip">
                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M12 12m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" /><path d="M22 12c-2.667 4.667 -6 7 -10 7s-7.333 -2.333 -10 -7c2.667 -4.667 6 -7 10 -7s7.333 2.333 10 7" /></svg>
                </button>
            </span>
            </div>
            <div class="form-footer">
                        <span>Expires -  <strong> @(count / 60) : @(count % 60)</strong></span>
            </div>
            <div class="form-footer">
                <button type="submit" class="btn btn-info w-100">Resend Token</button>
            </div>
            <div class="form-footer">
              <button type="submit" class="btn btn-primary w-100">Validate</button>
            </div>
          </EditForm>
          
        </div>
      </div>
      <div class="col-12 col-lg-6 col-xl-8 d-none d-lg-block">
        <!-- Photo -->
            <div class="bg-cover h-100 min-vh-100" style="background-image: url('/static/illustrations/undraw_secure_login_pdn4.svg');"></div>
      </div>
    </div>
</div>


@code {
    public string Email;
    public string Number;
    public string Error;
    public int count = 300;
    public string Visible = "password";
    public IdentityUser model = new();
    System.Timers.Timer aTimer = new System.Timers.Timer(1000);

    /**********************************************************/
    /*
    * Description: this medthod is called once the component is rendered
    * output: void
    */
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        StartTimer();
    }
    /**********************************************************/



     /**********************************************************/
    /*
     * Description: this medthod changes the visibility of the password
     * output: void
     */
    void ChangeVisibility()
    {
        if (Visible == "password")
            Visible = "text";
       else
       {
            Visible = "password";
       }
    }
    /**********************************************************/

   

    /**********************************************************/
    /*
     * Description: this medthod fetchs a new AuthenticationState for the user
     * output: Task<AuthenticationState>
     */
    public async Task<AuthenticationState> FetchAuthState(IdentityUser usr)
    {
        var state = new AuthenticationState(new ClaimsPrincipal(new ClaimsIdentity(await _user.GetClaimsAsync(usr))));

        return state;
    }
    /**********************************************************/



    /**********************************************************/
    /*
    * Description: this medthod authenticate the user, then redirects to dashboard
    * output: Task
    */
    public async Task OnPost()
    {
        try
        {
            
       
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    /**********************************************************/



    /**********************************************************/
    /*
    * Description: this two medthods starts the countdown for 2FA, and reschedule another token if expired.
    * output: void
    */
    void StartTimer()
    {

        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
    }
    async void CountDownTimer(Object source, ElapsedEventArgs e)
    {
        if (count > 0)
        {
            count -= 1;
        }
        else
        {
            aTimer.Enabled = false;
        }
        await InvokeAsync(StateHasChanged);
    }
    /**********************************************************/
}
